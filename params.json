{"name":"Automation-django-restframework-template-generator","tagline":"","body":"automation-django-RestFramework-Template-Generator\r\n==================================================\r\n#####Requirements\r\n\r\nPip to be installed and added to environment variables \r\n\r\nPython 2.7\r\n#####Steps to use\r\n1) If you don't have django and/or RestFramework  installed,  run setup.bat.\r\n\r\n2) Then run  test.bat and you're done :) .  To run  test.bat type:\r\n\r\n```test.bat <app-name>```\r\n\r\n3 ) To test the installations and  run the  project/server \r\n\r\n``` cd <folder with appname>```\r\n\r\n```python manage.py runserver 0.0.0.0:<port> ``` \r\n\r\nYou  can use  port between 1000 to 56K.  Ideally  we  use  port 8000 or 8080 \r\n\r\n#####Features\r\n1) you can check the output using \r\n```localhost:<port>\\test``` which shows a sample get query which renders an index html page with a list and a dict rendered on the page. The code for the same can be found in views.py ( class test) and templates\\index.html\r\n\r\n2) ```localhost:<port>\\get?parameter=12345``` is an example of a get query with query parameters. The  api  returns an application/json with same data as passed in the 'parameter' argument.\r\n\r\n3) ```localhost:<port>\\post``` is an  example of a Post request.  You  have  to  use either a rest console\\postman\\ any other extension to fire a  post request or you can use an ajax query from your  browser's console.  It  returns  the  data  passed as payload  as an  application/json.\r\n\r\n\r\n#####To contribute\r\n1) Fork the repo.\r\n\r\n2) Create a branch\r\n\r\n 3)  Send a pull request after making your changes.\r\n\r\n**(Check the  issues  to understand the  current   pending    works )\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}